@Library('shared-libraries2') _

pipeline {
    agent any

    environment {
        IMAGE_NAME = '' // Placeholder for dynamic image name
    }

    stages {
        stage('Checkout Source') {
            steps {
              try {
                checkoutScm() // This is the default command to checkout the source from the associated SCM. Typically, it's the Git repository that's connected to the Jenkins job.
              }  catch(Exception e) {
                error "Checkout fail"
              }
            }
        }
        stage('Unit Test') {
            steps {
                try {
                    decisionWrapper('Unit Test') {
                        gradleUnitTest()
                    }
                } catch(Exception e) {
                    error "Unit Test stage failed with error: ${e.message}"
                }
            }
        }

        stage('Integration Test') {
            steps {
                try {
                    decisionWrapper('Integration Test') {
                        gradleIntegrationTest()
                    }
                } catch(Exception e) {
                    error "Integration Test stage failed with error: ${e.message}"
                }
            }
        }

        stage('Decision: Helm Lint') {
            steps {
                try {
                    decisionWrapper('Helm Lint') {
                        runHelmLint()  // Call the new shared library method
                    }
                } catch(Exception e) {
                    error "Helm Lint stage failed with error: ${e.message}"
                }
            }
        }

        stage('Build Image') {
            steps {
                try {
                    script {
                        env.IMAGE_NAME = buildImage()
                    }
                } catch(Exception e) {
                    error "Build Image stage failed with error: ${e.message}"
                }
            }
        }

        stage('Blackduck Scan') {
            steps {
                try {
                    decisionWrapper('Blackduck Scan') {
                        blackduckScan('.')
                    }
                } catch(Exception e) {
                    error "Blackduck Scan stage failed with error: ${e.message}"
                }
            }
        }

        stage('Veracode Scan') {
            steps {
                try {
                    decisionWrapper('Veracode Scan') {
                        veracodeScan('.')
                    }
                } catch(Exception e) {
                    error "Veracode Scan stage failed with error: ${e.message}"
                }
            }
        }

        stage('Push to Artifactory') {
            steps {
                try {
                    pushToArtifactory(env.IMAGE_NAME, 'http://my.artifactory.url')
                } catch(Exception e) {
                    error "Push to Artifactory stage failed with error: ${e.message}"
                }
            }
        }
        stage('Cleanup Workspace') {
            steps {
                try {
                    cleanupWorkspace()
                } catch(Exception e) {
                    error "Workspace cleanup failed with error: ${e.message}"
                }
            }
        }
    }
}